// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  username     String         @unique
  password     String         @unique
  contact      String?        @unique
  name         String?
  idCard       String?
  isVerified   Boolean        @default(false)
  books        Book[]
  token        Token[]
  Notification Notification[]
}

model Admin {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  username     String         @unique
  name         String?
  password     String         @unique
  isVerified   Boolean        @default(false)
  type         String         @default("librarian") @unique
  token        Token[]
  Notification Notification[]
}

model Book {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  author       String
  status       String         @default("Request")
  returnDate   DateTime?
  userID       String         @db.ObjectId
  user         User           @relation(fields: [userID], references: [id])
  Notification Notification[]
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  otp       String
  validity  DateTime
  used      Boolean  @default(false)
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authToken String   @unique
  valid     Boolean
  type      String
  userID    String   @db.ObjectId
  user      User?    @relation(fields: [userID], references: [id])
  admin     Admin?   @relation(fields: [userID], references: [id])
}

model Booklist {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  cover   String?
  title   String
  author  String
  ISBN    String  @unique
  details String
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      Type
  content   Json
  date      DateTime @default(now())
  isRead    Boolean  @default(false)
  recptType userType
  userID    String?  @db.ObjectId
  adminID   String?  @db.ObjectId
  bookID    String?  @db.ObjectId
  user      User?    @relation(fields: [userID], references: [id])
  admin     Admin?   @relation(fields: [adminID], references: [id])
  book      Book?    @relation(fields: [bookID], references: [id])

  @@index([userID])
  @@index([adminID])
  @@index([isRead])
}

enum Type {
  REQUEST
  ISSUE
  REJECT
  OVERDUE
  REMINDER
  RETURNED
  ADMIN
  GENERAL
}

enum userType {
  USER
  ADMIN
}
